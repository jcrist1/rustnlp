// generated by diplomat-tool
import { TokRes } from "./TokRes.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const Tok_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.Tok_destroy(ptr);
});

export class Tok {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    constructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("Tok is an Opaque type. You cannot call its constructor.");
            return;
        }
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        
        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            Tok_box_destroy_registry.register(this, this.#ptr);
        }
    }

    get ffiValue() {
        return this.#ptr;
    }

    tokenize(text) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const textSlice = functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.str8(wasm, text));
        
        const result = wasm.Tok_tokenize(this.ffiValue, ...textSlice.splat());
    
        try {
            return new TokRes(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {
            functionCleanupArena.free();
        }
    }
}