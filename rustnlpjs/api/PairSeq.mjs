// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const PairSeq_box_destroy_registry = new FinalizationRegistry((ptr) => {
  wasm.PairSeq_destroy(ptr);
});

export class PairSeq {
  // Internal ptr reference:
  #ptr = null;

  // Lifetimes are only to keep dependencies alive.
  // Since JS won't garbage collect until there are no incoming edges.
  #selfEdge = [];

  constructor(symbol, ptr, selfEdge) {
    if (symbol !== diplomatRuntime.internalConstructor) {
      console.error(
        "PairSeq is an Opaque type. You cannot call its constructor.",
      );
      return;
    }

    this.#ptr = ptr;
    this.#selfEdge = selfEdge;

    // Are we being borrowed? If not, we can register.
    if (this.#selfEdge.length === 0) {
      PairSeq_box_destroy_registry.register(this, this.#ptr);
    }
  }

  get ffiValue() {
    return this.#ptr;
  }

  getSlice() {
    const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(
      wasm,
      8,
      4,
      false,
    );

    // This lifetime edge depends on lifetimes 'a
    let aEdges = [this];

    const result = wasm.PairSeq_get_slice(
      diplomatReceive.buffer,
      this.ffiValue,
    );

    try {
      return new diplomatRuntime.DiplomatSlicePrimitive(
        wasm,
        diplomatReceive.buffer,
        "i32",
        aEdges,
      );
    } finally {
      diplomatReceive.free();
    }
  }
}
