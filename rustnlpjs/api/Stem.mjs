// generated by diplomat-tool
import { Strings } from "./Strings.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const Stem_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.Stem_destroy(ptr);
});

export class Stem {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    constructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("Stem is an Opaque type. You cannot call its constructor.");
            return;
        }
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        
        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            Stem_box_destroy_registry.register(this, this.#ptr);
        }
    }

    get ffiValue() {
        return this.#ptr;
    }

    static create() {
        const result = wasm.Stem_create();
    
        try {
            return new Stem(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    stem(strs) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const strsSlice = functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.strs(wasm, strs, "string8"));
        
        const result = wasm.Stem_stem(this.ffiValue, ...strsSlice.splat());
    
        try {
            return new Strings(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {
            functionCleanupArena.free();
        }
    }
}